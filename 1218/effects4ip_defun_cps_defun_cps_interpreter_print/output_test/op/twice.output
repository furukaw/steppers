
  eval
    exp: (with (handler {A(x; k) -> (k x)}) handle ((A (fun a -> a)) (A 1)))
    in : 8
    out: 8

  eval
    exp: (handler {A(x; k) -> (k x)})
    in : (with 8 handle ((A (fun a -> a)) (A 1)))
    out: 8

  apply_in
    exp: (handler {A(x; k) -> (k x)})
    in : (with 8 handle ((A (fun a -> a)) (A 1)))
    out: 8

  eval
    exp: ((A (fun a -> a)) (A 1))
    in : 8
    out: (with (handler {A(x; k) -> (k x)}) handle 8)

  eval
    exp: (A 1)
    in : ((A (fun a -> a)) 8)
    out: (with (handler {A(x; k) -> (k x)}) handle 8)

  eval
    exp: 1
    in : ((A (fun a -> a)) (A 8))
    out: (with (handler {A(x; k) -> (k x)}) handle 8)

  apply_in
    exp: 1
    in : ((A (fun a -> a)) (A 8))
    out: (with (handler {A(x; k) -> (k x)}) handle 8)

  apply_out
    exp: (A 1)
      in : ((A (fun a -> a)) 8)
      out: 8
    in : 8
    out: (with (handler {A(x; k) -> (k x)}) handle 8)

  eval
    exp: ((fun y => (with (handler {A(x; k) -> (k x)}) handle ((A (fun a -> a)) y))) 1)
    in : 8
    out: 8

  eval
    exp: 1
    in : ((fun y => (with (handler {A(x; k) -> (k x)}) handle ((A (fun a -> a)) y))) 8)
    out: 8

  apply_in
    exp: 1
    in : ((fun y => (with (handler {A(x; k) -> (k x)}) handle ((A (fun a -> a)) y))) 8)
    out: 8

  eval
    exp: (fun y => (with (handler {A(x; k) -> (k x)}) handle ((A (fun a -> a)) y)))
    in : (8 1)
    out: 8

  apply_in
    exp: (fun y => (with (handler {A(x; k) -> (k x)}) handle ((A (fun a -> a)) y)))
    in : (8 1)
    out: 8

  apply_in
    exp: 1
    in : ((A (fun a -> a)) 8)
    out: (with (handler {A(x; k) -> (k x)}) handle 8)

  eval
    exp: (A (fun a -> a))
    in : (8 1)
    out: (with (handler {A(x; k) -> (k x)}) handle 8)

  eval
    exp: (fun a -> a)
    in : ((A 8) 1)
    out: (with (handler {A(x; k) -> (k x)}) handle 8)

  apply_in
    exp: (fun a -> a)
    in : ((A 8) 1)
    out: (with (handler {A(x; k) -> (k x)}) handle 8)

  apply_out
    exp: (A (fun a -> a))
      in : (8 1)
      out: 8
    in : 8
    out: (with (handler {A(x; k) -> (k x)}) handle 8)

  eval
    exp: ((fun z => (with (handler {A(x; k) -> (k x)}) handle (z 1))) (fun a -> a))
    in : 8
    out: 8

  eval
    exp: (fun a -> a)
    in : ((fun z => (with (handler {A(x; k) -> (k x)}) handle (z 1))) 8)
    out: 8

  apply_in
    exp: (fun a -> a)
    in : ((fun z => (with (handler {A(x; k) -> (k x)}) handle (z 1))) 8)
    out: 8

  eval
    exp: (fun z => (with (handler {A(x; k) -> (k x)}) handle (z 1)))
    in : (8 (fun a -> a))
    out: 8

  apply_in
    exp: (fun z => (with (handler {A(x; k) -> (k x)}) handle (z 1)))
    in : (8 (fun a -> a))
    out: 8

  apply_in
    exp: (fun a -> a)
    in : (8 1)
    out: (with (handler {A(x; k) -> (k x)}) handle 8)

  eval
    exp: 1
    in : 8
    out: (with (handler {A(x; k) -> (k x)}) handle 8)

  apply_in
    exp: 1
    in : 8
    out: (with (handler {A(x; k) -> (k x)}) handle 8)

  apply_out
    exp: 1
    in : 8
    out: (with (handler {A(x; k) -> (k x)}) handle 8)

  apply_in
    exp: 1
    in : 8
    out: 8

  apply_out
    exp: 1
    in : 8
    out: 8
Result:  1
