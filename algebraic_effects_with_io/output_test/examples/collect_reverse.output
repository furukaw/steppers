Step 0:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (((fun x -> print(x; y. y)) "A"; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C"))
Step 1:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((print("A"; y. y); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C"))
Step 1:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((print("A"; y. y); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C"))
Step 2:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (print("A"; y. (y; (fun x -> print(x; y. y)) "B")); (fun x -> print(x; y. y)) "C"))
Step 2:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (print("A"; y. (y; (fun x -> print(x; y. y)) "B")); (fun x -> print(x; y. y)) "C"))
Step 3:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle print("A"; y. ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")))
Step 3:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle print("A"; y. ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")))
Step 4:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((fun y -> with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")) (); (fun x -> print(x; y. y)) "A")
Step 4:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((fun y -> with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")) (); (fun x -> print(x; y. y)) "A")
Step 5:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (((); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "A")
Step 5:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (((); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "A")
Step 6:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((fun x -> print(x; y. y)) "B"; (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "A")
Step 6:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((fun x -> print(x; y. y)) "B"; (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "A")
Step 7:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (print("B"; y. y); (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "A")
Step 7:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (print("B"; y. y); (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "A")
Step 8:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle print("B"; y. (y; (fun x -> print(x; y. y)) "C"))); (fun x -> print(x; y. y)) "A")
Step 8:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle print("B"; y. (y; (fun x -> print(x; y. y)) "C"))); (fun x -> print(x; y. y)) "A")
Step 9:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (((fun y -> with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (y; (fun x -> print(x; y. y)) "C")) (); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 9:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (((fun y -> with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (y; (fun x -> print(x; y. y)) "C")) (); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 10:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((); (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 10:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((); (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 11:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 11:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 12:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle print("C"; y. y)); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 12:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle print("C"; y. y)); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 13:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((((fun y -> with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle y) (); (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 13:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((((fun y -> with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle y) (); (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 14:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ()); (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 14:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ()); (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 15:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((((); (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 15:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((((); (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 16:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (((fun x -> print(x; y. y)) "C"; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 16:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (((fun x -> print(x; y. y)) "C"; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 17:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((print("C"; y. y); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 17:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((print("C"; y. y); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 18:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (print("C"; y. (y; (fun x -> print(x; y. y)) "B")); (fun x -> print(x; y. y)) "A")
Step 18:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (print("C"; y. (y; (fun x -> print(x; y. y)) "B")); (fun x -> print(x; y. y)) "A")
Step 19:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle print("C"; y. ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A"))
Step 19:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle print("C"; y. ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A"))
Step 20:  do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")) () in (x, join "C" acc)
Step 20:  do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")) () in (x, join "C" acc)
Step 21:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (((); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")) in (x, join "C" acc)
Step 21:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (((); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")) in (x, join "C" acc)
Step 22:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((fun x -> print(x; y. y)) "B"; (fun x -> print(x; y. y)) "A")) in (x, join "C" acc)
Step 22:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((fun x -> print(x; y. y)) "B"; (fun x -> print(x; y. y)) "A")) in (x, join "C" acc)
Step 23:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (print("B"; y. y); (fun x -> print(x; y. y)) "A")) in (x, join "C" acc)
Step 23:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (print("B"; y. y); (fun x -> print(x; y. y)) "A")) in (x, join "C" acc)
Step 24:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle print("B"; y. (y; (fun x -> print(x; y. y)) "A"))) in (x, join "C" acc)
Step 24:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle print("B"; y. (y; (fun x -> print(x; y. y)) "A"))) in (x, join "C" acc)
Step 25:  do (x, acc) <- (do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (y; (fun x -> print(x; y. y)) "A")) () in (x, join "B" acc)) in (x, join "C" acc)
Step 25:  do (x, acc) <- (do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (y; (fun x -> print(x; y. y)) "A")) () in (x, join "B" acc)) in (x, join "C" acc)
Step 26:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((); (fun x -> print(x; y. y)) "A")) in (x, join "B" acc)) in (x, join "C" acc)
Step 26:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ((); (fun x -> print(x; y. y)) "A")) in (x, join "B" acc)) in (x, join "C" acc)
Step 27:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (fun x -> print(x; y. y)) "A") in (x, join "B" acc)) in (x, join "C" acc)
Step 27:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle (fun x -> print(x; y. y)) "A") in (x, join "B" acc)) in (x, join "C" acc)
Step 28:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle print("A"; y. y)) in (x, join "B" acc)) in (x, join "C" acc)
Step 28:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle print("A"; y. y)) in (x, join "B" acc)) in (x, join "C" acc)
Step 29:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle y) () in (x, join "A" acc)) in (x, join "B" acc)) in (x, join "C" acc)
Step 29:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle y) () in (x, join "A" acc)) in (x, join "B" acc)) in (x, join "C" acc)
Step 30:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ()) in (x, join "A" acc)) in (x, join "B" acc)) in (x, join "C" acc)
Step 30:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (x, join s acc)} handle ()) in (x, join "A" acc)) in (x, join "B" acc)) in (x, join "C" acc)
Step 31:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- ((), "") in (x, join "A" acc)) in (x, join "B" acc)) in (x, join "C" acc)
Step 31:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- ((), "") in (x, join "A" acc)) in (x, join "B" acc)) in (x, join "C" acc)
Step 32:  do (x, acc) <- (do (x, acc) <- ((), join "A" "") in (x, join "B" acc)) in (x, join "C" acc)
Step 32:  do (x, acc) <- (do (x, acc) <- ((), join "A" "") in (x, join "B" acc)) in (x, join "C" acc)
Step 33:  do (x, acc) <- (do (x, acc) <- ((), "A") in (x, join "B" acc)) in (x, join "C" acc)
Step 33:  do (x, acc) <- (do (x, acc) <- ((), "A") in (x, join "B" acc)) in (x, join "C" acc)
Step 34:  do (x, acc) <- ((), join "B" "A") in (x, join "C" acc)
Step 34:  do (x, acc) <- ((), join "B" "A") in (x, join "C" acc)
Step 35:  do (x, acc) <- ((), "B A") in (x, join "C" acc)
Step 35:  do (x, acc) <- ((), "B A") in (x, join "C" acc)
Step 36:  ((), join "C" "B A")
Step 36:  ((), join "C" "B A")
Step 37:  ((), "C B A")
Result:  ((), "C B A")
