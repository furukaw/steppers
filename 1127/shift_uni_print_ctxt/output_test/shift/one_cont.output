
  eval
    exp: (reset (fun () -> ((fun a -> a) (shift (fun b -> (b (fun c -> c)))))))
    in : 8
    out: 8

  eval
    exp: ((fun a -> a) (shift (fun b -> (b (fun c -> c)))))
    in : 8
    out: (reset (fun () -> 8))

  eval
    exp: (shift (fun b -> (b (fun c -> c))))
    in : ((fun a -> a) 8)
    out: (reset (fun () -> 8))
Step 0:  (reset (fun () -> ((fun a -> a) (shift (fun b -> (b (fun c -> c)))))))
Step 1:  (reset (fun () -> ((fun x => (reset (fun () -> ((fun a -> a) x)))) (fun c -> c))))

  eval
    exp: (reset (fun () -> ((fun x => (reset (fun () -> ((fun a -> a) x)))) (fun c -> c))))
    in : 8
    out: 8

  eval
    exp: ((fun x => (reset (fun () -> ((fun a -> a) x)))) (fun c -> c))
    in : 8
    out: (reset (fun () -> 8))

  eval
    exp: (fun c -> c)
    in : ((fun x => (reset (fun () -> ((fun a -> a) x)))) 8)
    out: (reset (fun () -> 8))

  apply_in
    exp: (fun c -> c)
    in : ((fun x => (reset (fun () -> ((fun a -> a) x)))) 8)
    out: (reset (fun () -> 8))

  eval
    exp: (fun x => (reset (fun () -> ((fun a -> a) x))))
    in : (8 (fun c -> c))
    out: (reset (fun () -> 8))

  apply_in
    exp: (fun x => (reset (fun () -> ((fun a -> a) x))))
    in : (8 (fun c -> c))
    out: (reset (fun () -> 8))
Step 1:  (reset (fun () -> ((fun x => (reset (fun () -> ((fun a -> a) x)))) (fun c -> c))))
Step 2:  (reset (fun () -> (reset (fun () -> ((fun a -> a) (fun c -> c))))))

  apply_in
    exp: (fun c -> c)
    in : ((fun a -> a) 8)
    out: (reset (fun () -> (reset (fun () -> 8))))

  eval
    exp: (fun a -> a)
    in : (8 (fun c -> c))
    out: (reset (fun () -> (reset (fun () -> 8))))

  apply_in
    exp: (fun a -> a)
    in : (8 (fun c -> c))
    out: (reset (fun () -> (reset (fun () -> 8))))
Step 2:  (reset (fun () -> (reset (fun () -> ((fun a -> a) (fun c -> c))))))
Step 3:  (reset (fun () -> (reset (fun () -> (fun c -> c)))))

  eval
    exp: (fun c -> c)
    in : 8
    out: (reset (fun () -> (reset (fun () -> 8))))

  apply_in
    exp: (fun c -> c)
    in : 8
    out: (reset (fun () -> (reset (fun () -> 8))))

  apply_out
    exp: (fun c -> c)
    in : 8
    out: (reset (fun () -> (reset (fun () -> 8))))
Step 3:  (reset (fun () -> (reset (fun () -> (fun c -> c)))))
Step 4:  (reset (fun () -> (fun c -> c)))

  apply_in
    exp: (fun c -> c)
    in : 8
    out: (reset (fun () -> 8))

  apply_out
    exp: (fun c -> c)
    in : 8
    out: (reset (fun () -> 8))
Step 4:  (reset (fun () -> (fun c -> c)))
Step 5:  (fun c -> c)

  apply_in
    exp: (fun c -> c)
    in : 8
    out: 8

  apply_out
    exp: (fun c -> c)
    in : 8
    out: 8
Result:  (fun c -> c)
