
  eval
    exp: (((fun a -> a) (fun b -> b)) (fun c -> c))
    in : 8
    out: 8

  eval
    exp: (fun c -> c)
    in : (((fun a -> a) (fun b -> b)) 8)
    out: 8

  apply_in
    exp: (fun c -> c)
    in : (((fun a -> a) (fun b -> b)) 8)
    out: 8

  eval
    exp: ((fun a -> a) (fun b -> b))
    in : (8 (fun c -> c))
    out: 8

  eval
    exp: (fun b -> b)
    in : (((fun a -> a) 8) (fun c -> c))
    out: 8

  apply_in
    exp: (fun b -> b)
    in : (((fun a -> a) 8) (fun c -> c))
    out: 8

  eval
    exp: (fun a -> a)
    in : ((8 (fun b -> b)) (fun c -> c))
    out: 8

  apply_in
    exp: (fun a -> a)
    in : ((8 (fun b -> b)) (fun c -> c))
    out: 8
Step 0:  (((fun a -> a) (fun b -> b)) (fun c -> c))
Step 1:  ((fun b -> b) (fun c -> c))

  eval
    exp: (fun b -> b)
    in : (8 (fun c -> c))
    out: 8

  apply_in
    exp: (fun b -> b)
    in : (8 (fun c -> c))
    out: 8
Step 1:  ((fun b -> b) (fun c -> c))
Step 2:  (fun c -> c)

  eval
    exp: (fun c -> c)
    in : 8
    out: 8

  apply_in
    exp: (fun c -> c)
    in : 8
    out: 8

  apply_out
    exp: (fun c -> c)
    in : 8
    out: 8
Result:  (fun c -> c)
