
  eval
    exp: (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) (A 2)) (A 4)))
    in : 8

  eval
    exp: (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))})
    in : (with 8 handle (((fun c -> c) (A 2)) (A 4)))

  apply_in
    exp: (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))})
    in : (with 8 handle (((fun c -> c) (A 2)) (A 4)))

  eval
    exp: (((fun c -> c) (A 2)) (A 4))
    in : 8

  eval
    exp: (A 4)
    in : (((fun c -> c) (A 2)) 8)

  eval
    exp: 4
    in : (((fun c -> c) (A 2)) (A 8))

  apply_in
    exp: 4
    in : (((fun c -> c) (A 2)) (A 8))

  apply_out handle
    exp: (A 4)
    in : 8
    h  : (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))})

  eval
    exp: ((fun a -> a) ((fun y => (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) (A 2)) y))) (fun b -> b)))
    in : 8

  eval
    exp: ((fun y => (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) (A 2)) y))) (fun b -> b))
    in : ((fun a -> a) 8)

  eval
    exp: (fun b -> b)
    in : ((fun a -> a) ((fun y => (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) (A 2)) y))) 8))

  apply_in
    exp: (fun b -> b)
    in : ((fun a -> a) ((fun y => (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) (A 2)) y))) 8))

  eval
    exp: (fun y => (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) (A 2)) y)))
    in : ((fun a -> a) (8 (fun b -> b)))

  apply_in
    exp: (fun y => (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) (A 2)) y)))
    in : ((fun a -> a) (8 (fun b -> b)))

  apply_in
    exp: (fun b -> b)
    in : ((fun a -> a) (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) (A 2)) 8)))

  apply_in
    exp: (fun b -> b)
    in : (((fun c -> c) (A 2)) 8)

  eval
    exp: ((fun c -> c) (A 2))
    in : (8 (fun b -> b))

  eval
    exp: (A 2)
    in : (((fun c -> c) 8) (fun b -> b))

  eval
    exp: 2
    in : (((fun c -> c) (A 8)) (fun b -> b))

  apply_in
    exp: 2
    in : (((fun c -> c) (A 8)) (fun b -> b))

  apply_out handle
    exp: (A 2)
    in : ((fun a -> a) 8)
    h  : (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))})

  eval
    exp: ((fun a -> a) ((fun z => (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) z) (fun b -> b)))) (fun b -> b)))
    in : ((fun a -> a) 8)

  eval
    exp: ((fun z => (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) z) (fun b -> b)))) (fun b -> b))
    in : ((fun a -> a) ((fun a -> a) 8))

  eval
    exp: (fun b -> b)
    in : ((fun a -> a) ((fun a -> a) ((fun z => (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) z) (fun b -> b)))) 8)))

  apply_in
    exp: (fun b -> b)
    in : ((fun a -> a) ((fun a -> a) ((fun z => (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) z) (fun b -> b)))) 8)))

  eval
    exp: (fun z => (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) z) (fun b -> b))))
    in : ((fun a -> a) ((fun a -> a) (8 (fun b -> b))))

  apply_in
    exp: (fun z => (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) z) (fun b -> b))))
    in : ((fun a -> a) ((fun a -> a) (8 (fun b -> b))))

  apply_in
    exp: (fun b -> b)
    in : ((fun a -> a) ((fun a -> a) (with (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))}) handle (((fun c -> c) 8) (fun b -> b)))))

  apply_in
    exp: (fun b -> b)
    in : (((fun c -> c) 8) (fun b -> b))

  eval
    exp: (fun c -> c)
    in : ((8 (fun b -> b)) (fun b -> b))

  apply_in
    exp: (fun c -> c)
    in : ((8 (fun b -> b)) (fun b -> b))

  eval
    exp: (fun b -> b)
    in : (8 (fun b -> b))

  apply_in
    exp: (fun b -> b)
    in : (8 (fun b -> b))

  eval
    exp: (fun b -> b)
    in : 8

  apply_in
    exp: (fun b -> b)
    in : 8

  apply_out handle
    exp: (fun b -> b)
    in : ((fun a -> a) ((fun a -> a) 8))
    h  : (handler {A(x; k) -> ((fun a -> a) (k (fun b -> b)))})

  apply_in
    exp: (fun b -> b)
    in : ((fun a -> a) ((fun a -> a) 8))

  eval
    exp: (fun a -> a)
    in : ((fun a -> a) (8 (fun b -> b)))

  apply_in
    exp: (fun a -> a)
    in : ((fun a -> a) (8 (fun b -> b)))

  eval
    exp: (fun b -> b)
    in : ((fun a -> a) 8)

  apply_in
    exp: (fun b -> b)
    in : ((fun a -> a) 8)

  eval
    exp: (fun a -> a)
    in : (8 (fun b -> b))

  apply_in
    exp: (fun a -> a)
    in : (8 (fun b -> b))

  eval
    exp: (fun b -> b)
    in : 8

  apply_in
    exp: (fun b -> b)
    in : 8

  apply_out id
    exp: (fun b -> b)
Result:  (fun b -> b)
