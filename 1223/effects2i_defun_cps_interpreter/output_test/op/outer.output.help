
  eval
    exp: ((fun a -> a) (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) (A ((fun d -> d) 2)))))))

  eval
    exp: (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) (A ((fun d -> d) 2))))))

  eval
    exp: (handler {A(x; k) -> (k x)})

  apply_in
    exp: (handler {A(x; k) -> (k x)})

  eval
    exp: ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) (A ((fun d -> d) 2)))))

  eval
    exp: (with (handler {B(x; k) -> 1}) handle ((fun c -> c) (A ((fun d -> d) 2))))

  eval
    exp: (handler {B(x; k) -> 1})

  apply_in
    exp: (handler {B(x; k) -> 1})

  eval
    exp: ((fun c -> c) (A ((fun d -> d) 2)))

  eval
    exp: (A ((fun d -> d) 2))

  eval
    exp: ((fun d -> d) 2)

  eval
    exp: 2

  apply_in
    exp: 2

  eval
    exp: (fun d -> d)

  apply_in
    exp: (fun d -> d)
((fun a -> a) (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) (A ((fun d -> d) 2)))))))
((fun a -> a) (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) (A 2))))))

  eval
    exp: 2

  apply_in
    exp: 2

  apply_out handle
    exp: (A 2)

  apply_out handle
    exp: (A 2)
((fun a -> a) (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) (A 2))))))
((fun a -> a) ((fun y => (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) y))))) 2))

  eval
    exp: (<cont> 2)

  eval
    exp: 2

  apply_in
    exp: 2

  eval
    exp: <cont>

  apply_in
    exp: <cont>
((fun a -> a) ((fun y => (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) y))))) 2))
((fun a -> a) (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) 2)))))

  apply_in
    exp: 2

  eval
    exp: (fun c -> c)

  apply_in
    exp: (fun c -> c)

((fun a -> a) (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) 2)))))
((fun a -> a) (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle 2))))

  eval
    exp: 2

  apply_in
    exp: 2

  apply_out handle
    exp: 2
((fun a -> a) (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle 2))))
((fun a -> a) (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) 2)))

  apply_in
    exp: 2

  eval
    exp: (fun b -> b)

  apply_in
    exp: (fun b -> b)
((fun a -> a) (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) 2)))
((fun a -> a) (with (handler {A(x; k) -> (k x)}) handle 2))

  eval
    exp: 2

  apply_in
    exp: 2

  apply_out handle
    exp: 2
((fun a -> a) (with (handler {A(x; k) -> (k x)}) handle 2))
((fun a -> a) 2)

  apply_in
    exp: 2

  eval
    exp: (fun a -> a)

  apply_in
    exp: (fun a -> a)
((fun a -> a) 2)
2

  eval
    exp: 2

  apply_in
    exp: 2

  apply_out
    exp: 2
Result:  2







