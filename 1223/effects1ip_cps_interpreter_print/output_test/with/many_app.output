
  eval
    exp: (((fun a -> a) (with (handler {A(x; k) -> 1}) handle ((fun b -> b) ((fun c -> c) (fun d -> d))))) 2)

  eval
    exp: 2

  apply_in app2
    exp: 2

  eval
    exp: ((fun a -> a) (with (handler {A(x; k) -> 1}) handle ((fun b -> b) ((fun c -> c) (fun d -> d)))))

  eval
    exp: (with (handler {A(x; k) -> 1}) handle ((fun b -> b) ((fun c -> c) (fun d -> d))))

  eval
    exp: (handler {A(x; k) -> 1})

  apply_in with
    exp: (handler {A(x; k) -> 1})

  eval
    exp: ((fun b -> b) ((fun c -> c) (fun d -> d)))

  eval
    exp: ((fun c -> c) (fun d -> d))

  eval
    exp: (fun d -> d)

  apply_in app2
    exp: (fun d -> d)

  eval
    exp: (fun c -> c)

  apply_in app1
    exp: (fun c -> c)

  eval
    exp: (fun d -> d)

  apply_in app2
    exp: (fun d -> d)

  eval
    exp: (fun b -> b)

  apply_in app1
    exp: (fun b -> b)

  eval
    exp: (fun d -> d)

  apply_in id
    exp: (fun d -> d)

  apply_out handle
    exp: (fun d -> d)

  apply_in app2
    exp: (fun d -> d)

  eval
    exp: (fun a -> a)

  apply_in app1
    exp: (fun a -> a)

  eval
    exp: (fun d -> d)

  apply_in app1
    exp: (fun d -> d)

  eval
    exp: 2

  apply_in id
    exp: 2

  apply_out id
    exp: 2
Result:  2
