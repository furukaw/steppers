
  eval
    exp: ((fun a -> a) (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) (A ((fun d -> d) 2)))))))
    in : 8

  eval
    exp: (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) (A ((fun d -> d) 2))))))
    in : ((fun a -> a) 8)

  eval
    exp: (handler {A(x; k) -> (k x)})
    in : ((fun a -> a) (with 8 handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) (A ((fun d -> d) 2)))))))

  apply_in
    exp: (handler {A(x; k) -> (k x)})
    in : ((fun a -> a) (with 8 handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) (A ((fun d -> d) 2)))))))

  eval
    exp: ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) (A ((fun d -> d) 2)))))
    in : 8

  eval
    exp: (with (handler {B(x; k) -> 1}) handle ((fun c -> c) (A ((fun d -> d) 2))))
    in : ((fun b -> b) 8)

  eval
    exp: (handler {B(x; k) -> 1})
    in : ((fun b -> b) (with 8 handle ((fun c -> c) (A ((fun d -> d) 2)))))

  apply_in
    exp: (handler {B(x; k) -> 1})
    in : ((fun b -> b) (with 8 handle ((fun c -> c) (A ((fun d -> d) 2)))))

  eval
    exp: ((fun c -> c) (A ((fun d -> d) 2)))
    in : 8

  eval
    exp: (A ((fun d -> d) 2))
    in : ((fun c -> c) 8)

  eval
    exp: ((fun d -> d) 2)
    in : ((fun c -> c) (A 8))

  eval
    exp: 2
    in : ((fun c -> c) (A ((fun d -> d) 8)))

  apply_in
    exp: 2
    in : ((fun c -> c) (A ((fun d -> d) 8)))

  eval
    exp: (fun d -> d)
    in : ((fun c -> c) (A (8 2)))

  apply_in
    exp: (fun d -> d)
    in : ((fun c -> c) (A (8 2)))

  eval
    exp: 2
    in : ((fun c -> c) (A 8))

  apply_in
    exp: 2
    in : ((fun c -> c) (A 8))

  apply_out handle
    exp: (A 2)
    in : ((fun b -> b) 8)
    h  : (handler {B(x; k) -> 1})

  apply_out handle
    exp: (A 2)
    in : ((fun a -> a) 8)
    h  : (handler {A(x; k) -> (k x)})

  eval
    exp: ((fun y => (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) y))))) 2)
    in : ((fun a -> a) 8)

  eval
    exp: 2
    in : ((fun a -> a) ((fun y => (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) y))))) 8))

  apply_in
    exp: 2
    in : ((fun a -> a) ((fun y => (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) y))))) 8))

  eval
    exp: (fun y => (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) y)))))
    in : ((fun a -> a) (8 2))

  apply_in
    exp: (fun y => (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) y)))))
    in : ((fun a -> a) (8 2))

  apply_in
    exp: 2
    in : (with (handler {A(x; k) -> (k x)}) handle ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) 8))))

  apply_in
    exp: 2
    in : ((fun b -> b) (with (handler {B(x; k) -> 1}) handle ((fun c -> c) 8)))

  apply_in
    exp: 2
    in : ((fun c -> c) 8)

  eval
    exp: (fun c -> c)
    in : (8 2)

  apply_in
    exp: (fun c -> c)
    in : (8 2)

  eval
    exp: 2
    in : 8

  apply_in
    exp: 2
    in : 8

  apply_out handle
    exp: 2
    in : ((fun b -> b) 8)
    h  : (handler {B(x; k) -> 1})

  apply_in
    exp: 2
    in : ((fun b -> b) 8)

  eval
    exp: (fun b -> b)
    in : (8 2)

  apply_in
    exp: (fun b -> b)
    in : (8 2)

  eval
    exp: 2
    in : 8

  apply_in
    exp: 2
    in : 8

  apply_out handle
    exp: 2
    in : 8
    h  : (handler {A(x; k) -> (k x)})

  apply_in
    exp: 2
    in : 8

  apply_out id
    exp: 2
Result:  2
