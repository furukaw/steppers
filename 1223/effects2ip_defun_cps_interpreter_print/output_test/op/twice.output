
  eval
    exp: (with (handler {A(x; k) -> (k x)}) handle ((A (fun a -> a)) (A 1)))
    in : 8

  eval
    exp: (handler {A(x; k) -> (k x)})
    in : (with 8 handle ((A (fun a -> a)) (A 1)))

  apply_in
    exp: (handler {A(x; k) -> (k x)})
    in : (with 8 handle ((A (fun a -> a)) (A 1)))

  eval
    exp: ((A (fun a -> a)) (A 1))
    in : 8

  eval
    exp: (A 1)
    in : ((A (fun a -> a)) 8)

  eval
    exp: 1
    in : ((A (fun a -> a)) (A 8))

  apply_in
    exp: 1
    in : ((A (fun a -> a)) (A 8))

  apply_out handle
    exp: (A 1)
    in : 8
    h  : (handler {A(x; k) -> (k x)})

  eval
    exp: ((fun y => (with (handler {A(x; k) -> (k x)}) handle ((A (fun a -> a)) y))) 1)
    in : 8

  eval
    exp: 1
    in : ((fun y => (with (handler {A(x; k) -> (k x)}) handle ((A (fun a -> a)) y))) 8)

  apply_in
    exp: 1
    in : ((fun y => (with (handler {A(x; k) -> (k x)}) handle ((A (fun a -> a)) y))) 8)

  eval
    exp: (fun y => (with (handler {A(x; k) -> (k x)}) handle ((A (fun a -> a)) y)))
    in : (8 1)

  apply_in
    exp: (fun y => (with (handler {A(x; k) -> (k x)}) handle ((A (fun a -> a)) y)))
    in : (8 1)

  apply_in
    exp: 1
    in : (with (handler {A(x; k) -> (k x)}) handle ((A (fun a -> a)) 8))

  apply_in
    exp: 1
    in : ((A (fun a -> a)) 8)

  eval
    exp: (A (fun a -> a))
    in : (8 1)

  eval
    exp: (fun a -> a)
    in : ((A 8) 1)

  apply_in
    exp: (fun a -> a)
    in : ((A 8) 1)

  apply_out handle
    exp: (A (fun a -> a))
    in : 8
    h  : (handler {A(x; k) -> (k x)})

  eval
    exp: ((fun z => (with (handler {A(x; k) -> (k x)}) handle (z 1))) (fun a -> a))
    in : 8

  eval
    exp: (fun a -> a)
    in : ((fun z => (with (handler {A(x; k) -> (k x)}) handle (z 1))) 8)

  apply_in
    exp: (fun a -> a)
    in : ((fun z => (with (handler {A(x; k) -> (k x)}) handle (z 1))) 8)

  eval
    exp: (fun z => (with (handler {A(x; k) -> (k x)}) handle (z 1)))
    in : (8 (fun a -> a))

  apply_in
    exp: (fun z => (with (handler {A(x; k) -> (k x)}) handle (z 1)))
    in : (8 (fun a -> a))

  apply_in
    exp: (fun a -> a)
    in : (with (handler {A(x; k) -> (k x)}) handle (8 1))

  apply_in
    exp: (fun a -> a)
    in : (8 1)

  eval
    exp: 1
    in : 8

  apply_in
    exp: 1
    in : 8

  apply_out handle
    exp: 1
    in : 8
    h  : (handler {A(x; k) -> (k x)})

  apply_in
    exp: 1
    in : 8

  apply_out id
    exp: 1
Result:  1
