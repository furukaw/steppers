
  eval
    exp : ((fun a -> a) ((reset (fun () -> (((fun c -> c) ((fun e -> e) (fun f -> f))) (fun d -> d)))) (fun b -> b)))
    oin : 8
    xin : 8
    xout: 8

  eval
    exp : ((reset (fun () -> (((fun c -> c) ((fun e -> e) (fun f -> f))) (fun d -> d)))) (fun b -> b))
    oin : ((fun a -> a) 8)
    xin : ((fun a -> a) 8)
    xout: 8

  eval
    exp : (fun b -> b)
    oin : ((fun a -> a) ((reset (fun () -> (((fun c -> c) ((fun e -> e) (fun f -> f))) (fun d -> d)))) 8))
    xin : ((fun a -> a) ((reset (fun () -> (((fun c -> c) ((fun e -> e) (fun f -> f))) (fun d -> d)))) 8))
    xout: 8

  apply_in
    exp : (fun b -> b)
    oin : ((fun a -> a) ((reset (fun () -> (((fun c -> c) ((fun e -> e) (fun f -> f))) (fun d -> d)))) 8))
    xout: 8

  eval
    exp : (reset (fun () -> (((fun c -> c) ((fun e -> e) (fun f -> f))) (fun d -> d))))
    oin : ((fun a -> a) (8 (fun b -> b)))
    xin : ((fun a -> a) (8 (fun b -> b)))
    xout: 8

  eval
    exp : (((fun c -> c) ((fun e -> e) (fun f -> f))) (fun d -> d))
    oin : 8
    xin : 8
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))

  eval
    exp : (fun d -> d)
    oin : (((fun c -> c) ((fun e -> e) (fun f -> f))) 8)
    xin : (((fun c -> c) ((fun e -> e) (fun f -> f))) 8)
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))

  apply_in
    exp : (fun d -> d)
    oin : (((fun c -> c) ((fun e -> e) (fun f -> f))) 8)
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))

  eval
    exp : ((fun c -> c) ((fun e -> e) (fun f -> f)))
    oin : (8 (fun d -> d))
    xin : (8 (fun d -> d))
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))

  eval
    exp : ((fun e -> e) (fun f -> f))
    oin : (((fun c -> c) 8) (fun d -> d))
    xin : (((fun c -> c) 8) (fun d -> d))
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))

  eval
    exp : (fun f -> f)
    oin : (((fun c -> c) ((fun e -> e) 8)) (fun d -> d))
    xin : (((fun c -> c) ((fun e -> e) 8)) (fun d -> d))
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))

  apply_in
    exp : (fun f -> f)
    oin : (((fun c -> c) ((fun e -> e) 8)) (fun d -> d))
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))

  eval
    exp : (fun e -> e)
    oin : (((fun c -> c) (8 (fun f -> f))) (fun d -> d))
    xin : (((fun c -> c) (8 (fun f -> f))) (fun d -> d))
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))

  apply_in
    exp : (fun e -> e)
    oin : (((fun c -> c) (8 (fun f -> f))) (fun d -> d))
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))
Step 0:  ((fun a -> a) ((reset (fun () -> (((fun c -> c) ((fun e -> e) (fun f -> f))) (fun d -> d)))) (fun b -> b)))
Step 1:  ((fun a -> a) ((reset (fun () -> (((fun c -> c) (fun f -> f)) (fun d -> d)))) (fun b -> b)))

  eval
    exp : (fun f -> f)
    oin : (((fun c -> c) 8) (fun d -> d))
    xin : (((fun c -> c) 8) (fun d -> d))
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))

  apply_in
    exp : (fun f -> f)
    oin : (((fun c -> c) 8) (fun d -> d))
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))

  eval
    exp : (fun c -> c)
    oin : ((8 (fun f -> f)) (fun d -> d))
    xin : ((8 (fun f -> f)) (fun d -> d))
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))

  apply_in
    exp : (fun c -> c)
    oin : ((8 (fun f -> f)) (fun d -> d))
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))
Step 1:  ((fun a -> a) ((reset (fun () -> (((fun c -> c) (fun f -> f)) (fun d -> d)))) (fun b -> b)))
Step 2:  ((fun a -> a) ((reset (fun () -> ((fun f -> f) (fun d -> d)))) (fun b -> b)))

  eval
    exp : (fun f -> f)
    oin : (8 (fun d -> d))
    xin : (8 (fun d -> d))
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))

  apply_in
    exp : (fun f -> f)
    oin : (8 (fun d -> d))
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))
Step 2:  ((fun a -> a) ((reset (fun () -> ((fun f -> f) (fun d -> d)))) (fun b -> b)))
Step 3:  ((fun a -> a) ((reset (fun () -> (fun d -> d))) (fun b -> b)))

  eval
    exp : (fun d -> d)
    oin : 8
    xin : 8
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))

  apply_in
    exp : (fun d -> d)
    oin : 8
    xout: ((fun a -> a) ((reset (fun () -> 8)) (fun b -> b)))

  apply_out
    exp : (fun d -> d)
Step 3:  ((fun a -> a) ((reset (fun () -> (fun d -> d))) (fun b -> b)))
Step 4:  ((fun a -> a) ((fun d -> d) (fun b -> b)))

  apply_in
    exp : (fun d -> d)
    oin : ((fun a -> a) (8 (fun b -> b)))
    xout: 8
Step 4:  ((fun a -> a) ((fun d -> d) (fun b -> b)))
Step 5:  ((fun a -> a) (fun b -> b))

  eval
    exp : (fun b -> b)
    oin : ((fun a -> a) 8)
    xin : ((fun a -> a) 8)
    xout: 8

  apply_in
    exp : (fun b -> b)
    oin : ((fun a -> a) 8)
    xout: 8

  eval
    exp : (fun a -> a)
    oin : (8 (fun b -> b))
    xin : (8 (fun b -> b))
    xout: 8

  apply_in
    exp : (fun a -> a)
    oin : (8 (fun b -> b))
    xout: 8
Step 5:  ((fun a -> a) (fun b -> b))
Step 6:  (fun b -> b)

  eval
    exp : (fun b -> b)
    oin : 8
    xin : 8
    xout: 8

  apply_in
    exp : (fun b -> b)
    oin : 8
    xout: 8

  apply_out
    exp : (fun b -> b)
Result:  (fun b -> b)
