
  eval
    exp : (((fun a -> a) (reset (fun () -> ((fun b -> b) ((shift (fun k -> (((fun c -> c) k) (fun d -> d)))) (fun e -> e)))))) (fun f -> f))
    oin : 8
    xin : 8
    xout: 8

  eval
    exp : (fun f -> f)
    oin : (((fun a -> a) (reset (fun () -> ((fun b -> b) ((shift (fun k -> (((fun c -> c) k) (fun d -> d)))) (fun e -> e)))))) 8)
    xin : (((fun a -> a) (reset (fun () -> ((fun b -> b) ((shift (fun k -> (((fun c -> c) k) (fun d -> d)))) (fun e -> e)))))) 8)
    xout: 8

  apply_in
    exp : (fun f -> f)
    oin : (((fun a -> a) (reset (fun () -> ((fun b -> b) ((shift (fun k -> (((fun c -> c) k) (fun d -> d)))) (fun e -> e)))))) 8)
    xout: 8

  eval
    exp : ((fun a -> a) (reset (fun () -> ((fun b -> b) ((shift (fun k -> (((fun c -> c) k) (fun d -> d)))) (fun e -> e))))))
    oin : (8 (fun f -> f))
    xin : (8 (fun f -> f))
    xout: 8

  eval
    exp : (reset (fun () -> ((fun b -> b) ((shift (fun k -> (((fun c -> c) k) (fun d -> d)))) (fun e -> e)))))
    oin : (((fun a -> a) 8) (fun f -> f))
    xin : (((fun a -> a) 8) (fun f -> f))
    xout: 8

  eval
    exp : ((fun b -> b) ((shift (fun k -> (((fun c -> c) k) (fun d -> d)))) (fun e -> e)))
    oin : 8
    xin : 8
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))

  eval
    exp : ((shift (fun k -> (((fun c -> c) k) (fun d -> d)))) (fun e -> e))
    oin : ((fun b -> b) 8)
    xin : ((fun b -> b) 8)
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))

  eval
    exp : (fun e -> e)
    oin : ((fun b -> b) ((shift (fun k -> (((fun c -> c) k) (fun d -> d)))) 8))
    xin : ((fun b -> b) ((shift (fun k -> (((fun c -> c) k) (fun d -> d)))) 8))
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))

  apply_in
    exp : (fun e -> e)
    oin : ((fun b -> b) ((shift (fun k -> (((fun c -> c) k) (fun d -> d)))) 8))
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))

  eval
    exp : (shift (fun k -> (((fun c -> c) k) (fun d -> d))))
    oin : ((fun b -> b) (8 (fun e -> e)))
    xin : ((fun b -> b) (8 (fun e -> e)))
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))
Step 0:  (((fun a -> a) (reset (fun () -> ((fun b -> b) ((shift (fun k -> (((fun c -> c) k) (fun d -> d)))) (fun e -> e)))))) (fun f -> f))
Step 1:  (((fun a -> a) (reset (fun () -> (((fun c -> c) (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e))))))) (fun d -> d))))) (fun f -> f))

  eval
    exp : (reset (fun () -> (((fun c -> c) (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e))))))) (fun d -> d))))
    oin : (((fun a -> a) 8) (fun f -> f))
    xin : (((fun a -> a) 8) (fun f -> f))
    xout: 8

  eval
    exp : (((fun c -> c) (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e))))))) (fun d -> d))
    oin : 8
    xin : 8
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))

  eval
    exp : (fun d -> d)
    oin : (((fun c -> c) (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e))))))) 8)
    xin : (((fun c -> c) (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e))))))) 8)
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))

  apply_in
    exp : (fun d -> d)
    oin : (((fun c -> c) (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e))))))) 8)
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))

  eval
    exp : ((fun c -> c) (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e)))))))
    oin : (8 (fun d -> d))
    xin : (8 (fun d -> d))
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))

  eval
    exp : (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e))))))
    oin : (((fun c -> c) 8) (fun d -> d))
    xin : (((fun c -> c) 8) (fun d -> d))
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))

  apply_in
    exp : (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e))))))
    oin : (((fun c -> c) 8) (fun d -> d))
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))

  eval
    exp : (fun c -> c)
    oin : ((8 (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e))))))) (fun d -> d))
    xin : ((8 (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e))))))) (fun d -> d))
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))

  apply_in
    exp : (fun c -> c)
    oin : ((8 (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e))))))) (fun d -> d))
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))
Step 1:  (((fun a -> a) (reset (fun () -> (((fun c -> c) (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e))))))) (fun d -> d))))) (fun f -> f))
Step 2:  (((fun a -> a) (reset (fun () -> ((fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e)))))) (fun d -> d))))) (fun f -> f))

  eval
    exp : (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e))))))
    oin : (8 (fun d -> d))
    xin : (8 (fun d -> d))
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))

  apply_in
    exp : (fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e))))))
    oin : (8 (fun d -> d))
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))
Step 2:  (((fun a -> a) (reset (fun () -> ((fun x => (reset (fun () -> ((fun b -> b) (x (fun e -> e)))))) (fun d -> d))))) (fun f -> f))
Step 3:  (((fun a -> a) (reset (fun () -> (reset (fun () -> ((fun b -> b) ((fun d -> d) (fun e -> e)))))))) (fun f -> f))

  apply_in
    exp : (fun d -> d)
    oin : ((fun b -> b) (8 (fun e -> e)))
    xout: (((fun a -> a) (reset (fun () -> (reset (fun () -> 8))))) (fun f -> f))
Step 3:  (((fun a -> a) (reset (fun () -> (reset (fun () -> ((fun b -> b) ((fun d -> d) (fun e -> e)))))))) (fun f -> f))
Step 4:  (((fun a -> a) (reset (fun () -> (reset (fun () -> ((fun b -> b) (fun e -> e))))))) (fun f -> f))

  eval
    exp : (fun e -> e)
    oin : ((fun b -> b) 8)
    xin : ((fun b -> b) 8)
    xout: (((fun a -> a) (reset (fun () -> (reset (fun () -> 8))))) (fun f -> f))

  apply_in
    exp : (fun e -> e)
    oin : ((fun b -> b) 8)
    xout: (((fun a -> a) (reset (fun () -> (reset (fun () -> 8))))) (fun f -> f))

  eval
    exp : (fun b -> b)
    oin : (8 (fun e -> e))
    xin : (8 (fun e -> e))
    xout: (((fun a -> a) (reset (fun () -> (reset (fun () -> 8))))) (fun f -> f))

  apply_in
    exp : (fun b -> b)
    oin : (8 (fun e -> e))
    xout: (((fun a -> a) (reset (fun () -> (reset (fun () -> 8))))) (fun f -> f))
Step 4:  (((fun a -> a) (reset (fun () -> (reset (fun () -> ((fun b -> b) (fun e -> e))))))) (fun f -> f))
Step 5:  (((fun a -> a) (reset (fun () -> (reset (fun () -> (fun e -> e)))))) (fun f -> f))

  eval
    exp : (fun e -> e)
    oin : 8
    xin : 8
    xout: (((fun a -> a) (reset (fun () -> (reset (fun () -> 8))))) (fun f -> f))

  apply_in
    exp : (fun e -> e)
    oin : 8
    xout: (((fun a -> a) (reset (fun () -> (reset (fun () -> 8))))) (fun f -> f))

  apply_out3
    exp : (fun e -> e)
Step 5:  (((fun a -> a) (reset (fun () -> (reset (fun () -> (fun e -> e)))))) (fun f -> f))
Step 6:  (((fun a -> a) (reset (fun () -> (fun e -> e)))) (fun f -> f))

  apply_in
    exp : (fun e -> e)
    oin : 8
    xout: (((fun a -> a) (reset (fun () -> 8))) (fun f -> f))

  apply_out2
    exp : (fun e -> e)
Step 6:  (((fun a -> a) (reset (fun () -> (fun e -> e)))) (fun f -> f))
Step 7:  (((fun a -> a) (fun e -> e)) (fun f -> f))

  apply_in
    exp : (fun e -> e)
    oin : (((fun a -> a) 8) (fun f -> f))
    xout: 8

  eval
    exp : (fun a -> a)
    oin : ((8 (fun e -> e)) (fun f -> f))
    xin : ((8 (fun e -> e)) (fun f -> f))
    xout: 8

  apply_in
    exp : (fun a -> a)
    oin : ((8 (fun e -> e)) (fun f -> f))
    xout: 8
Step 7:  (((fun a -> a) (fun e -> e)) (fun f -> f))
Step 8:  ((fun e -> e) (fun f -> f))

  eval
    exp : (fun e -> e)
    oin : (8 (fun f -> f))
    xin : (8 (fun f -> f))
    xout: 8

  apply_in
    exp : (fun e -> e)
    oin : (8 (fun f -> f))
    xout: 8
Step 8:  ((fun e -> e) (fun f -> f))
Step 9:  (fun f -> f)

  eval
    exp : (fun f -> f)
    oin : 8
    xin : 8
    xout: 8

  apply_in
    exp : (fun f -> f)
    oin : 8
    xout: 8

  apply_out1
    exp : (fun f -> f)
Result:  (fun f -> f)
