Step 0:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((fun x -> print(x; y. y)) "A"; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")
Step 1:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((print("A"; y. y); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")
Step 1:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((print("A"; y. y); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")
Step 2:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (print("A"; y. (y; (fun x -> print(x; y. y)) "B")); (fun x -> print(x; y. y)) "C")
Step 2:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (print("A"; y. (y; (fun x -> print(x; y. y)) "B")); (fun x -> print(x; y. y)) "C")
Step 3:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle print("A"; y. ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C"))
Step 3:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle print("A"; y. ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C"))
Step 4:  do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")) () in (do joined <- (join "A" acc) in (x, joined))
Step 4:  do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")) () in (do joined <- (join "A" acc) in (x, joined))
Step 5:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")) in (do joined <- (join "A" acc) in (x, joined))
Step 5:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")) in (do joined <- (join "A" acc) in (x, joined))
Step 6:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((fun x -> print(x; y. y)) "B"; (fun x -> print(x; y. y)) "C")) in (do joined <- (join "A" acc) in (x, joined))
Step 6:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((fun x -> print(x; y. y)) "B"; (fun x -> print(x; y. y)) "C")) in (do joined <- (join "A" acc) in (x, joined))
Step 7:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (print("B"; y. y); (fun x -> print(x; y. y)) "C")) in (do joined <- (join "A" acc) in (x, joined))
Step 7:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (print("B"; y. y); (fun x -> print(x; y. y)) "C")) in (do joined <- (join "A" acc) in (x, joined))
Step 8:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle print("B"; y. (y; (fun x -> print(x; y. y)) "C"))) in (do joined <- (join "A" acc) in (x, joined))
Step 8:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle print("B"; y. (y; (fun x -> print(x; y. y)) "C"))) in (do joined <- (join "A" acc) in (x, joined))
Step 9:  do (x, acc) <- (do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (y; (fun x -> print(x; y. y)) "C")) () in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 9:  do (x, acc) <- (do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (y; (fun x -> print(x; y. y)) "C")) () in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 10:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((); (fun x -> print(x; y. y)) "C")) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 10:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((); (fun x -> print(x; y. y)) "C")) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 11:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (fun x -> print(x; y. y)) "C") in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 11:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (fun x -> print(x; y. y)) "C") in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 12:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle print("C"; y. y)) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 12:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle print("C"; y. y)) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 13:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle y) () in (do joined <- (join "C" acc) in (x, joined))) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 13:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle y) () in (do joined <- (join "C" acc) in (x, joined))) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 14:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ()) in (do joined <- (join "C" acc) in (x, joined))) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 14:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ()) in (do joined <- (join "C" acc) in (x, joined))) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 15:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- ((), "") in (do joined <- (join "C" acc) in (x, joined))) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 15:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- ((), "") in (do joined <- (join "C" acc) in (x, joined))) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 16:  do (x, acc) <- (do (x, acc) <- (do joined <- (join "C" "") in ((), joined)) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 16:  do (x, acc) <- (do (x, acc) <- (do joined <- (join "C" "") in ((), joined)) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 17:  do (x, acc) <- (do (x, acc) <- (do joined <- "C" in ((), joined)) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 17:  do (x, acc) <- (do (x, acc) <- (do joined <- "C" in ((), joined)) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 18:  do (x, acc) <- (do (x, acc) <- ((), "C") in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 18:  do (x, acc) <- (do (x, acc) <- ((), "C") in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "A" acc) in (x, joined))
Step 19:  do (x, acc) <- (do joined <- (join "B" "C") in ((), joined)) in (do joined <- (join "A" acc) in (x, joined))
Step 19:  do (x, acc) <- (do joined <- (join "B" "C") in ((), joined)) in (do joined <- (join "A" acc) in (x, joined))
Step 20:  do (x, acc) <- (do joined <- "B C" in ((), joined)) in (do joined <- (join "A" acc) in (x, joined))
Step 20:  do (x, acc) <- (do joined <- "B C" in ((), joined)) in (do joined <- (join "A" acc) in (x, joined))
Step 21:  do (x, acc) <- ((), "B C") in (do joined <- (join "A" acc) in (x, joined))
Step 21:  do (x, acc) <- ((), "B C") in (do joined <- (join "A" acc) in (x, joined))
Step 22:  do joined <- (join "A" "B C") in ((), joined)
Step 22:  do joined <- (join "A" "B C") in ((), joined)
Step 23:  do joined <- "A B C" in ((), joined)
Step 23:  do joined <- "A B C" in ((), joined)
Step 24:  ((), "A B C")
Result:  ((), "A B C")
