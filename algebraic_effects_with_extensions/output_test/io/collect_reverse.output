Step 0:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (((fun x -> print(x; y. y)) "A"; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C"))
Step 1:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((print("A"; y. y); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C"))
Step 1:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((print("A"; y. y); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C"))
Step 2:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (print("A"; y. (y; (fun x -> print(x; y. y)) "B")); (fun x -> print(x; y. y)) "C"))
Step 2:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (print("A"; y. (y; (fun x -> print(x; y. y)) "B")); (fun x -> print(x; y. y)) "C"))
Step 3:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle print("A"; y. ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")))
Step 3:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle print("A"; y. ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")))
Step 4:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((fun y -> with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")) (); (fun x -> print(x; y. y)) "A")
Step 4:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((fun y -> with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")) (); (fun x -> print(x; y. y)) "A")
Step 5:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (((); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "A")
Step 5:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (((); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "A")
Step 6:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((fun x -> print(x; y. y)) "B"; (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "A")
Step 6:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((fun x -> print(x; y. y)) "B"; (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "A")
Step 7:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (print("B"; y. y); (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "A")
Step 7:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (print("B"; y. y); (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "A")
Step 8:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle print("B"; y. (y; (fun x -> print(x; y. y)) "C"))); (fun x -> print(x; y. y)) "A")
Step 8:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle print("B"; y. (y; (fun x -> print(x; y. y)) "C"))); (fun x -> print(x; y. y)) "A")
Step 9:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((fun y -> with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (y; (fun x -> print(x; y. y)) "C")) (); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 9:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((fun y -> with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (y; (fun x -> print(x; y. y)) "C")) (); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 10:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((); (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 10:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ((); (fun x -> print(x; y. y)) "C")); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 11:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 11:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 12:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle print("C"; y. y)); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 12:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle print("C"; y. y)); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 13:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((((fun y -> with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle y) (); (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 13:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((((fun y -> with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle y) (); (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 14:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ()); (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 14:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((((with handler {print(s; k) -> k (); (fun x -> print(x; y. y)) s} handle ()); (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 15:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((((); (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 15:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((((); (fun x -> print(x; y. y)) "C"); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 16:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((fun x -> print(x; y. y)) "C"; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 16:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((fun x -> print(x; y. y)) "C"; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 17:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((print("C"; y. y); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 17:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((print("C"; y. y); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")
Step 18:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (print("C"; y. (y; (fun x -> print(x; y. y)) "B")); (fun x -> print(x; y. y)) "A")
Step 18:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (print("C"; y. (y; (fun x -> print(x; y. y)) "B")); (fun x -> print(x; y. y)) "A")
Step 19:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle print("C"; y. ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A"))
Step 19:  with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle print("C"; y. ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A"))
Step 20:  do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")) () in (do joined <- (join "C" acc) in (x, joined))
Step 20:  do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((y; (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")) () in (do joined <- (join "C" acc) in (x, joined))
Step 21:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")) in (do joined <- (join "C" acc) in (x, joined))
Step 21:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (((); (fun x -> print(x; y. y)) "B"); (fun x -> print(x; y. y)) "A")) in (do joined <- (join "C" acc) in (x, joined))
Step 22:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((fun x -> print(x; y. y)) "B"; (fun x -> print(x; y. y)) "A")) in (do joined <- (join "C" acc) in (x, joined))
Step 22:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((fun x -> print(x; y. y)) "B"; (fun x -> print(x; y. y)) "A")) in (do joined <- (join "C" acc) in (x, joined))
Step 23:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (print("B"; y. y); (fun x -> print(x; y. y)) "A")) in (do joined <- (join "C" acc) in (x, joined))
Step 23:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (print("B"; y. y); (fun x -> print(x; y. y)) "A")) in (do joined <- (join "C" acc) in (x, joined))
Step 24:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle print("B"; y. (y; (fun x -> print(x; y. y)) "A"))) in (do joined <- (join "C" acc) in (x, joined))
Step 24:  do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle print("B"; y. (y; (fun x -> print(x; y. y)) "A"))) in (do joined <- (join "C" acc) in (x, joined))
Step 25:  do (x, acc) <- (do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (y; (fun x -> print(x; y. y)) "A")) () in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 25:  do (x, acc) <- (do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (y; (fun x -> print(x; y. y)) "A")) () in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 26:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((); (fun x -> print(x; y. y)) "A")) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 26:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ((); (fun x -> print(x; y. y)) "A")) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 27:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (fun x -> print(x; y. y)) "A") in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 27:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle (fun x -> print(x; y. y)) "A") in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 28:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle print("A"; y. y)) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 28:  do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle print("A"; y. y)) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 29:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle y) () in (do joined <- (join "A" acc) in (x, joined))) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 29:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- (fun y -> with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle y) () in (do joined <- (join "A" acc) in (x, joined))) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 30:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ()) in (do joined <- (join "A" acc) in (x, joined))) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 30:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- (with handler {return x -> (x, ""), print(s; k) -> do (x, acc) <- k () in (do joined <- (join s acc) in (x, joined))} handle ()) in (do joined <- (join "A" acc) in (x, joined))) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 31:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- ((), "") in (do joined <- (join "A" acc) in (x, joined))) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 31:  do (x, acc) <- (do (x, acc) <- (do (x, acc) <- ((), "") in (do joined <- (join "A" acc) in (x, joined))) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 32:  do (x, acc) <- (do (x, acc) <- (do joined <- (join "A" "") in ((), joined)) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 32:  do (x, acc) <- (do (x, acc) <- (do joined <- (join "A" "") in ((), joined)) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 33:  do (x, acc) <- (do (x, acc) <- (do joined <- "A" in ((), joined)) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 33:  do (x, acc) <- (do (x, acc) <- (do joined <- "A" in ((), joined)) in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 34:  do (x, acc) <- (do (x, acc) <- ((), "A") in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 34:  do (x, acc) <- (do (x, acc) <- ((), "A") in (do joined <- (join "B" acc) in (x, joined))) in (do joined <- (join "C" acc) in (x, joined))
Step 35:  do (x, acc) <- (do joined <- (join "B" "A") in ((), joined)) in (do joined <- (join "C" acc) in (x, joined))
Step 35:  do (x, acc) <- (do joined <- (join "B" "A") in ((), joined)) in (do joined <- (join "C" acc) in (x, joined))
Step 36:  do (x, acc) <- (do joined <- "B A" in ((), joined)) in (do joined <- (join "C" acc) in (x, joined))
Step 36:  do (x, acc) <- (do joined <- "B A" in ((), joined)) in (do joined <- (join "C" acc) in (x, joined))
Step 37:  do (x, acc) <- ((), "B A") in (do joined <- (join "C" acc) in (x, joined))
Step 37:  do (x, acc) <- ((), "B A") in (do joined <- (join "C" acc) in (x, joined))
Step 38:  do joined <- (join "C" "B A") in ((), joined)
Step 38:  do joined <- (join "C" "B A") in ((), joined)
Step 39:  do joined <- "C B A" in ((), joined)
Step 39:  do joined <- "C B A" in ((), joined)
Step 40:  ((), "C B A")
Result:  ((), "C B A")
