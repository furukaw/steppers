((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle ((A (((fun c -> c) (fun d -> d)) (fun e -> e))) (fun f -> f))) (fun g -> g))) (fun h -> h))

  eval
    exp: ((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle ((A (((fun c -> c) (fun d -> d)) (fun e -> e))) (fun f -> f))) (fun g -> g))) (fun h -> h))

  eval
    exp: (fun h -> h)

  apply_in
    exp: (fun h -> h)

  eval
    exp: (with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle ((A (((fun c -> c) (fun d -> d)) (fun e -> e))) (fun f -> f))) (fun g -> g)))

  eval
    exp: ({A(x; k) -> (fun a -> (a (k x)))})

  apply_in
    exp: ({A(x; k) -> (fun a -> (a (k x)))})

  eval
    exp: ((with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle ((A (((fun c -> c) (fun d -> d)) (fun e -> e))) (fun f -> f))) (fun g -> g))

  eval
    exp: (fun g -> g)

  apply_in
    exp: (fun g -> g)

  eval
    exp: (with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle ((A (((fun c -> c) (fun d -> d)) (fun e -> e))) (fun f -> f)))

  eval
    exp: ({A(x; k) -> (fun b -> (b (A (k x))))})

  apply_in
    exp: ({A(x; k) -> (fun b -> (b (A (k x))))})

  eval
    exp: ((A (((fun c -> c) (fun d -> d)) (fun e -> e))) (fun f -> f))

  eval
    exp: (fun f -> f)

  apply_in
    exp: (fun f -> f)

  eval
    exp: (A (((fun c -> c) (fun d -> d)) (fun e -> e)))

  eval
    exp: (((fun c -> c) (fun d -> d)) (fun e -> e))

  eval
    exp: (fun e -> e)

  apply_in
    exp: (fun e -> e)

  eval
    exp: ((fun c -> c) (fun d -> d))

  eval
    exp: (fun d -> d)

  apply_in
    exp: (fun d -> d)

  eval
    exp: (fun c -> c)

  apply_in
    exp: (fun c -> c)
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle ((A (((fun c -> c) (fun d -> d)) (fun e -> e))) (fun f -> f))) (fun g -> g))) (fun h -> h))
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle ((A ((fun d -> d) (fun e -> e))) (fun f -> f))) (fun g -> g))) (fun h -> h))

  eval
    exp: (fun d -> d)

  apply_in
    exp: (fun d -> d)
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle ((A ((fun d -> d) (fun e -> e))) (fun f -> f))) (fun g -> g))) (fun h -> h))
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle ((A (fun e -> e)) (fun f -> f))) (fun g -> g))) (fun h -> h))

  eval
    exp: (fun e -> e)

  apply_in
    exp: (fun e -> e)

  apply_out handle
    exp: (A (fun e -> e))
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle ((A (fun e -> e)) (fun f -> f))) (fun g -> g))) (fun h -> h))
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun b -> (b (A ((fun y => (with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle (y (fun f -> f)))) (fun e -> e))))) (fun g -> g))) (fun h -> h))

  eval
    exp: (fun b -> (b (A (<cont> (fun e -> e)))))

  apply_in
    exp: (fun b -> (b (A (<cont> (fun e -> e)))))
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun b -> (b (A ((fun y => (with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle (y (fun f -> f)))) (fun e -> e))))) (fun g -> g))) (fun h -> h))
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun g -> g) (A ((fun y => (with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle (y (fun f -> f)))) (fun e -> e))))) (fun h -> h))

  eval
    exp: ((fun g -> g) (A (<cont> (fun e -> e))))

  eval
    exp: (A (<cont> (fun e -> e)))

  eval
    exp: (<cont> (fun e -> e))

  eval
    exp: (fun e -> e)

  apply_in
    exp: (fun e -> e)

  eval
    exp: <cont>

  apply_in
    exp: <cont>
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun g -> g) (A ((fun y => (with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle (y (fun f -> f)))) (fun e -> e))))) (fun h -> h))
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun g -> g) (A (with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle ((fun e -> e) (fun f -> f)))))) (fun h -> h))

  apply_in
    exp: (fun e -> e)
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun g -> g) (A (with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle ((fun e -> e) (fun f -> f)))))) (fun h -> h))
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun g -> g) (A (with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle (fun f -> f))))) (fun h -> h))

  eval
    exp: (fun f -> f)

  apply_in
    exp: (fun f -> f)

  apply_out handle
    exp: (fun f -> f)
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun g -> g) (A (with ({A(x; k) -> (fun b -> (b (A (k x))))}) handle (fun f -> f))))) (fun h -> h))
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun g -> g) (A (fun f -> f)))) (fun h -> h))

  apply_in
    exp: (fun f -> f)

  apply_out handle
    exp: (A (fun f -> f))
((with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun g -> g) (A (fun f -> f)))) (fun h -> h))
((fun a -> (a ((fun z => (with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun g -> g) z))) (fun f -> f)))))

  eval
    exp: (fun a -> (a (<cont> (fun f -> f))))

  apply_in
    exp: (fun a -> (a (<cont> (fun f -> f))))
((fun a -> (a ((fun z => (with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun g -> g) z))) (fun f -> f)))))
((fun h -> h) ((fun z => (with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun g -> g) z))) (fun f -> f)))

  eval
    exp: ((fun h -> h) (<cont> (fun f -> f)))

  eval
    exp: (<cont> (fun f -> f))

  eval
    exp: (fun f -> f)

  apply_in
    exp: (fun f -> f)

  eval
    exp: <cont>

  apply_in
    exp: <cont>
((fun h -> h) ((fun z => (with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun g -> g) z))) (fun f -> f)))
((fun h -> h) (with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun g -> g) (fun f -> f))))

  apply_in
    exp: (fun f -> f)

  eval
    exp: (fun g -> g)

  apply_in
    exp: (fun g -> g)
((fun h -> h) (with ({A(x; k) -> (fun a -> (a (k x)))}) handle ((fun g -> g) (fun f -> f))))
((fun h -> h) (with ({A(x; k) -> (fun a -> (a (k x)))}) handle (fun f -> f)))

  eval
    exp: (fun f -> f)

  apply_in
    exp: (fun f -> f)

  apply_out handle
    exp: (fun f -> f)
((fun h -> h) (with ({A(x; k) -> (fun a -> (a (k x)))}) handle (fun f -> f)))
((fun h -> h) (fun f -> f))

  apply_in
    exp: (fun f -> f)

  eval
    exp: (fun h -> h)

  apply_in
    exp: (fun h -> h)
((fun h -> h) (fun f -> f))

  eval
    exp: (fun f -> f)

  apply_in
    exp: (fun f -> f)

  apply_out id
    exp: (fun f -> f)
(fun f -> f)
