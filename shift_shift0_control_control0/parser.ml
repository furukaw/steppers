type token =
  | LPAREN
  | RPAREN
  | FUN
  | ARROW
  | PLUS
  | SHIFT
  | RESET
  | SHIFT0
  | CONTROL
  | CONTROL0
  | NUMBER of (int)
  | VAR of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Syntax
(* 補助的な変数、関数、型などの定義 *)
# 22 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* FUN *);
  260 (* ARROW *);
  261 (* PLUS *);
  262 (* SHIFT *);
  263 (* RESET *);
  264 (* SHIFT0 *);
  265 (* CONTROL *);
  266 (* CONTROL0 *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  267 (* NUMBER *);
  268 (* VAR *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\003\000\001\000\004\000\002\000\003\000\007\000\
\007\000\007\000\007\000\008\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\000\001\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\003\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\
\009\000\010\000\011\000\012\000"

let yydgoto = "\002\000\
\012\000\013\000"

let yysindex = "\005\000\
\016\255\000\000\016\255\247\254\006\255\008\255\009\255\011\255\
\015\255\000\000\000\000\077\255\000\000\003\255\017\255\029\255\
\030\255\032\255\036\255\039\255\016\255\000\000\000\000\016\255\
\041\255\019\255\043\255\055\255\057\255\045\255\077\255\066\255\
\069\255\079\255\080\255\081\255\016\255\086\255\016\255\016\255\
\016\255\047\255\016\255\049\255\061\255\063\255\000\000\075\255\
\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\253\255\255\255"

let yytablesize = 262
let yytable = "\014\000\
\007\000\005\000\015\000\003\000\023\000\001\000\016\000\021\000\
\017\000\018\000\022\000\019\000\022\000\010\000\011\000\020\000\
\003\000\030\000\004\000\033\000\031\000\005\000\006\000\007\000\
\008\000\009\000\010\000\011\000\022\000\022\000\024\000\025\000\
\026\000\042\000\027\000\044\000\045\000\046\000\028\000\048\000\
\022\000\029\000\022\000\022\000\022\000\003\000\022\000\003\000\
\047\000\003\000\049\000\021\000\032\000\021\000\034\000\010\000\
\011\000\010\000\011\000\010\000\011\000\003\000\050\000\003\000\
\051\000\021\000\035\000\021\000\036\000\037\000\038\000\010\000\
\011\000\010\000\011\000\003\000\052\000\003\000\013\000\021\000\
\000\000\021\000\039\000\040\000\041\000\010\000\011\000\010\000\
\011\000\043\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\005\000\000\000\007\000"

let yycheck = "\003\000\
\000\000\000\000\012\001\001\001\002\001\001\000\001\001\005\001\
\001\001\001\001\012\000\001\001\014\000\011\001\012\001\001\001\
\001\001\021\000\003\001\001\001\024\000\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\030\000\031\000\014\001\003\001\
\003\001\037\000\003\001\039\000\040\000\041\000\003\001\043\000\
\042\000\003\001\044\000\045\000\046\000\001\001\048\000\001\001\
\002\001\001\001\002\001\005\001\012\001\005\001\012\001\011\001\
\012\001\011\001\012\001\011\001\012\001\001\001\002\001\001\001\
\002\001\005\001\012\001\005\001\012\001\004\001\002\001\011\001\
\012\001\011\001\012\001\001\001\002\001\001\001\000\000\005\001\
\255\255\005\001\004\001\004\001\004\001\011\001\012\001\011\001\
\012\001\004\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\002\001\255\255\005\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  FUN\000\
  ARROW\000\
  PLUS\000\
  SHIFT\000\
  RESET\000\
  SHIFT0\000\
  CONTROL\000\
  CONTROL0\000\
  EOF\000\
  "

let yynames_block = "\
  NUMBER\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 34 "parser.mly"
        ( Var (_1) )
# 180 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 36 "parser.mly"
        ( Value (Num (_1)) )
# 187 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.e_t) in
    Obj.repr(
# 38 "parser.mly"
        ( _2 )
# 194 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 42 "parser.mly"
        ( _1 )
# 201 "parser.ml"
               : Syntax.e_t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.e_t) in
    Obj.repr(
# 44 "parser.mly"
        ( Value (Lam (_2, _4)) )
# 209 "parser.ml"
               : Syntax.e_t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.e_t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 46 "parser.mly"
        ( App (_1, _2) )
# 217 "parser.ml"
               : Syntax.e_t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.e_t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.e_t) in
    Obj.repr(
# 48 "parser.mly"
        ( Plus (_1, _3) )
# 225 "parser.ml"
               : Syntax.e_t))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Syntax.e_t) in
    Obj.repr(
# 50 "parser.mly"
        ( Shift (_4, _6) )
# 233 "parser.ml"
               : Syntax.e_t))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Syntax.e_t) in
    Obj.repr(
# 52 "parser.mly"
        ( Shift0 (_4, _6) )
# 241 "parser.ml"
               : Syntax.e_t))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Syntax.e_t) in
    Obj.repr(
# 54 "parser.mly"
        ( Control (_4, _6) )
# 249 "parser.ml"
               : Syntax.e_t))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Syntax.e_t) in
    Obj.repr(
# 56 "parser.mly"
        ( Control0 (_4, _6) )
# 257 "parser.ml"
               : Syntax.e_t))
; (fun __caml_parser_env ->
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Syntax.e_t) in
    Obj.repr(
# 58 "parser.mly"
        ( Reset (_7) )
# 264 "parser.ml"
               : Syntax.e_t))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.e_t)
