
  eval
    exp : (((fun a -> a) (with (handler {A(x; k) -> 1}) handle ((fun b -> b) ((fun c -> c) (fun d -> d))))) 2)

  eval
    exp : 2

  apply app2
    exp : 2

  eval
    exp : ((fun a -> a) (with (handler {A(x; k) -> 1}) handle ((fun b -> b) ((fun c -> c) (fun d -> d)))))

  eval
    exp : (with (handler {A(x; k) -> 1}) handle ((fun b -> b) ((fun c -> c) (fun d -> d))))

  eval
    exp : (handler {A(x; k) -> 1})

  apply_in with
    exp : (handler {A(x; k) -> 1})

  eval
    exp : ((fun b -> b) ((fun c -> c) (fun d -> d)))

  eval
    exp : ((fun c -> c) (fun d -> d))

  eval
    exp : (fun d -> d)

  apply app2
    exp : (fun d -> d)

  eval
    exp : (fun c -> c)

  apply app1
    exp : (fun c -> c)

  eval
    exp : (fun d -> d)

  apply app2
    exp : (fun d -> d)

  eval
    exp : (fun b -> b)

  apply app1
    exp : (fun b -> b)

  eval
    exp : (fun d -> d)

  apply app2
    exp : (fun d -> d)

  eval
    exp : (fun a -> a)

  apply app1
    exp : (fun a -> a)

  eval
    exp : (fun d -> d)

  apply app1
    exp : (fun d -> d)

  eval
    exp : 2
Result:  2
